{
    "version": "0.1.0",
    "id": "peri-conv",
    "use_case": "Daugava",
    "title": {
        "en": "Group data to groups based on date"
    },
    "description": {
        "en": "This process groups the data into groups based on the date. If requested (by setting \"year_starts_at_Dec1\"), it adds December to the next year (i.e. all winter months together). In that case, in the result, every year starts at Dec-01 and ends on Nov-30. The process generates the numeric variable \"Year_adj_generated\" to show this change. It generates the character variable \"group_labels\" to allow grouping the data based on the provided periods, and the column \"period_label\" which contains the period definition, e.g. \"Jun-01:Aug-30\" (R function 'peri_conv')."
    },
    "jobControlOptions": ["sync-execute", "async-execute"],
    "keywords": ["daugava use case", "AquaINFRA", "peri_conv", "R"],
    "links": [{
        "type": "text/html",
        "rel": "about",
        "title": "GitHub repo",
        "href": "https://github.com/AstraLabuce/aquainfra-usecase-Daugava",
        "hreflang": "en-US"
    }],
    "inputs": {
        "input_data": {
            "title": "Table to be grouped by date, with date colum",
            "description": "URL to the table with a column containing a date. It can have other columns which will not be changed during this process.",
            "schema": {
                "type": "string"
            },
            "minOccurs": 1,
            "maxOccurs": 1,
            "keywords": ["table", "csv"]
        },
        "colname_date": {
            "title": "Date column name",
            "description": "Column name of the date column in the format defined above. Example: \"visit_date\".",

            "schema": {
                "type": "string"
            },
            "minOccurs": 1,
            "maxOccurs": 1,
            "keywords": []
        },
        "date_format": {
            "title": "Date format",
            "description": "The date format used to parse the date, i.e. to extract day, month and year from the date column, e.g.  or \"y-m-d\" for dates like \"1998-08-22\" (this is the default) or \"y/m/d\" for dates like \"1998/08/22\".",
            "schema": {
                "type": "string",
                "enum": [
                    "y-m-d",
                    "y/m/d"
                ],
                "default": "y-m-d"
            },
            "minOccurs": 0,
            "maxOccurs": 1,
            "keywords": []
        },
        "group_to_periods": {
            "title": "Periods to group the data into",
            "description": "Define the periods that you want the data to be grouped into. Please follow the example (which is also the default): \"Dec-01:Mar-01,Mar-02:May-30,Jun-01:Aug-30,Sep-01:Nov-30\" (first three letters of each month, then a minus/hyphen, then the day (two digits), then comma, then the next period).",
            "schema": {
                "type": "string",
                "default": "Dec-01:Mar-01,Mar-02:May-30,Jun-01:Aug-30,Sep-01:Nov-30"
            },
            "minOccurs": 0,
            "maxOccurs": 1,
            "keywords": []
        },
        "period_labels": {
            "title": "Period labels",
            "description": "Define names for the periods defined above, separated by a comma. Example (which is also the default): \"winter,spring,summer,autumn\".",
            "schema": {
                "type": "string",
                "default": "winter,spring,summer,autumn"
            },
            "minOccurs": 0,
            "maxOccurs": 1,
            "keywords": ["period"]
        },
        "year_starts_at_dec1": {
            "title": "Include December into next year",
            "description": "Tell whether the years in your grouping starts at first of December (\"true\") or not (\"false\"). This has to be reflected in the period definitions, these should not contradict each other. Defaults to \"true\".",
            "schema": {
                "type": "boolean",
                "default": true
            },
            "minOccurs": 0,
            "maxOccurs": 1,
            "keywords": ["year"]
        }
    },
    "outputs": {
        "data_grouped_by_date": {
            "title": "The input table grouped by date",
            "description": "The input table grouped by period, i.e. with added columns \"group_labels\" (e.g. \"winter\", allows to group the data in later analyses), \"period_label\" (the period definition, e.g. \"Jun-01:Aug-30\"), \"Year_adj_generated\" (in case the year is set to start on December first, December gets assigned the adjacent year), ,  \"leap_year\" (boolean to indicate leap year), and \"Day_generated\", \"Month_generated\", \"Year_generated\" (simply generated from the date column).",
            "schema": {
                "type": "object",
                "contentMediaType": "application/json"
            }
        }
    },
    "example": {
        "inputs": {
            "input_data": "https://testserver.de/download/data_merged_with_regions.csv",
            "colname_date": "visit date",
            "group_to_periods": "Dec-01:Mar-01,Mar-02:May-30,Jun-01:Aug-30,Sep-01:Nov-30",
            "group_labels": "winter,spring,summer,autumn",
            "date_format": "%Y-%m-%d",
            "year_starts_at_Dec1": "true"
        }
    }
}
